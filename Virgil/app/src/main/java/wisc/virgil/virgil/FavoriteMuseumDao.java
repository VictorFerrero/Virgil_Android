package wisc.virgil.virgil;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import wisc.virgil.virgil.FavoriteMuseum;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FAVORITE_MUSEUM.
*/
public class FavoriteMuseumDao extends AbstractDao<FavoriteMuseum, Long> {

    public static final String TABLENAME = "FAVORITE_MUSEUM";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MuseumID = new Property(1, Integer.class, "museumID", false, "MUSEUM_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property PathToPicture = new Property(4, String.class, "pathToPicture", false, "PATH_TO_PICTURE");
        public final static Property Display = new Property(5, Boolean.class, "display", false, "DISPLAY");
    };


    public FavoriteMuseumDao(DaoConfig config) {
        super(config);
    }
    
    public FavoriteMuseumDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'FAVORITE_MUSEUM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MUSEUM_ID' INTEGER," + // 1: museumID
                "'NAME' TEXT," + // 2: name
                "'ADDRESS' TEXT," + // 3: address
                "'PATH_TO_PICTURE' TEXT," + // 4: pathToPicture
                "'DISPLAY' INTEGER);"; // 5: display
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FAVORITE_MUSEUM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FavoriteMuseum entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer museumID = entity.getMuseumID();
        if (museumID != null) {
            stmt.bindLong(2, museumID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
 
        String pathToPicture = entity.getPathToPicture();
        if (pathToPicture != null) {
            stmt.bindString(5, pathToPicture);
        }
 
        Boolean display = entity.getDisplay();
        if (display != null) {
            stmt.bindLong(6, display ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FavoriteMuseum readEntity(Cursor cursor, int offset) {
        FavoriteMuseum entity = new FavoriteMuseum( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // museumID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // address
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pathToPicture
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // display
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FavoriteMuseum entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMuseumID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPathToPicture(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDisplay(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected Long updateKeyAfterInsert(FavoriteMuseum entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FavoriteMuseum entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
